# FINAL PRODUCTION-READY CONFIGURATION
steps:
  # Step 1: Ingest Knowledge Base
  # This step runs first in a temporary environment. It checks out the source code,
  # installs dependencies, and runs the ingest.py script to build the vector store
  # and upload it to Google Cloud Storage.
  - name: 'python:3.11-slim'
    id: 'Ingest Knowledge Base'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install -r requirements.txt
        python ingest.py
    env:
      - 'GCP_PROJECT_ID=${PROJECT_ID}'

  # Step 2: Build the application container image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Application Image'
    args:
      - 'build'
      - '--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:$SHORT_SHA'
      - '.'
    # This step depends on the ingestion step completing successfully.
    wait_for: ['Ingest Knowledge Base']

  # Step 3: Push the application image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Application Image'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:$SHORT_SHA'

  # Step 4: Run Integration Tests
  - name: 'python:3.11-slim'
    id: 'Run Integration Tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install -r tests/requirements.txt
        pytest tests/integration_test.py -v
    env:
      - 'WEBHOOK_URL=${_WEBHOOK_URL}'
    secretEnv:
      - 'TELEGRAM_BOT_TOKEN'
    # This step depends on the push step completing successfully.
    wait_for: ['Push Application Image']

  # Step 5: Deploy the application image to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to Cloud Run'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:$SHORT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--service-account'
      - '${_SERVICE_ACCOUNT_EMAIL}'
      - '--update-secrets=TELEGRAM_BOT_TOKEN=TELEGRAM_BOT_TOKEN:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest'
      - '--set-env-vars=GCP_PROJECT_ID=${PROJECT_ID}'
    # This step depends on the integration tests completing successfully.
    wait_for: ['Run Integration Tests']

images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:$SHORT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _REGION: 'europe-west1'
  _REPO_NAME: 'chatbot-repo'
  _SERVICE_NAME: 'chatbot-service'
  _SERVICE_ACCOUNT_EMAIL: 'chatbot-runtime-sa@vortex-ai-user.iam.gserviceaccount.com'
  # Integration test webhook URL
  _WEBHOOK_URL: 'https://chatbot-service-157843431191.europe-west1.run.app'

# Secret configuration for integration tests
availableSecrets:
  secretManager:
    - versionName: 'projects/${PROJECT_ID}/secrets/TELEGRAM_BOT_TOKEN/versions/latest'
      env: 'TELEGRAM_BOT_TOKEN'

# The entire build process will use the permissions of the default Cloud Build Service Account.
serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com'
