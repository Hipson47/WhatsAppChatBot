# To jest poprawna i kompletna konfiguracja dla Twojego potoku CI/CD
# Buduje obraz, wysyła go do Artifact Registry i wdraża w Cloud Run.

steps:
  # Krok 1: Budowanie obrazu Docker
  # Używa najnowszego commita jako tagu, co jest najlepszą praktyką.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Image'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/chatbot-repo/chatbot-service:$SHORT_SHA'
      - '.'

  # Krok 2: Wypchnięcie obrazu do Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Image'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/chatbot-repo/chatbot-service:$SHORT_SHA'

  # Krok 3: Wdrożenie nowej wersji w Cloud Run
  # Używa poprawnego obrazu buildera 'gcr.io/cloud-builders/gcloud'.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to Cloud Run'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'chatbot-service' # Nazwa Twojej usługi w Cloud Run
      - '--image'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/chatbot-repo/chatbot-service:$SHORT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--service-account'
      - 'chatbot-runtime-sa@${PROJECT_ID}.iam.gserviceaccount.com'
      - '--update-secrets=TELEGRAM_BOT_TOKEN=TELEGRAM_BOT_TOKEN:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest'

# Definiuje, że ten build tworzy konkretny obraz.
# To pomaga w śledzeniu artefaktów.
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/chatbot-repo/chatbot-service:$SHORT_SHA'

# Globalne opcje dla całego procesu budowania.
options:
  logging: CLOUD_LOGGING_ONLY

# Domyślne wartości zmiennych, które można nadpisać w triggerze.
substitutions:
  _REGION: 'europe-west1'